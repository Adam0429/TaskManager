%%-*- mode: erlang -*-
%% emqx_backend_dynamo config mapping

{mapping, "backend.dynamo.region", "emqx_backend_dynamo.region", [
  {default, "us-west-2"},
  {datatype, string}
]}.

{mapping, "backend.dynamo.$name.server", "emqx_backend_dynamo.pools", [
  {default, "http://127.0.0.1:8000"},
  {datatype, string}
]}.

{mapping, "backend.dynamo.$name.pool_size", "emqx_backend_dynamo.pools", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "backend.dynamo.$name.aws_access_key_id", "emqx_backend_dynamo.pools", [
  {default, "AKIAU5IM2XOC"},
  {datatype, string}
]}.

{mapping, "backend.dynamo.$name.aws_secret_access_key", "emqx_backend_dynamo.pools", [
  {default, "TZt7XoRi+vtCJYQ9Y"},
  {datatype, string}
]}.

{mapping, "backend.dynamo.$name.aws_default_region", "emqx_backend_dynamo.pools", [
  {default, "us-west-2"},
  {datatype, string}
]}.

{translation, "emqx_backend_dynamo.pools", fun(Conf) ->
    DynamoDB = cuttlefish_variable:fuzzy_matches(["backend", "dynamo", "$name", "server"], Conf),
    Key = fun(Name, Attr) -> string:join(["backend.dynamo", Name, Attr], ".") end,
    lists:map(fun({_, Name}) ->
    URIString = cuttlefish:conf_get(Key(Name, "server"), Conf),
    URIMAP = uri_string:parse(URIString),
    DHost = maps:get(host, URIMAP),
    DPort = maps:get(port, URIMAP),
    DScheme = maps:get(scheme, URIMAP) ++ "://",
    PoolSize = cuttlefish:conf_get(Key(Name, "pool_size"), Conf, 8),
    AWS_ACCESS_KEY_ID = cuttlefish:conf_get(Key(Name, "aws_access_key_id"), Conf),
    AWS_SECRET_ACCESS_KEY = cuttlefish:conf_get(Key(Name, "aws_secret_access_key"), Conf),
    {list_to_atom(Name),
     [{scheme, DScheme},
      {host, DHost},
      {port, DPort},
      {pool_size, PoolSize},
      {aws_access_key_id, AWS_ACCESS_KEY_ID},
      {aws_secret_access_key, AWS_SECRET_ACCESS_KEY}
     ]}
  end, DynamoDB)
end}.

{mapping, "backend.dynamo.hook.client.connected.$name", "emqx_backend_dynamo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.dynamo.hook.client.disconnected.$name", "emqx_backend_dynamo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.dynamo.hook.session.subscribed.$name", "emqx_backend_dynamo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.dynamo.hook.session.unsubscribed.$name", "emqx_backend_dynamo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.dynamo.hook.message.publish.$name", "emqx_backend_dynamo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.dynamo.hook.message.acked.$name", "emqx_backend_dynamo.hooks", [
  {datatype, string}
]}.

{translation, "emqx_backend_dynamo.hooks", fun(Conf) ->
  Hooks = cuttlefish_variable:filter_by_prefix("backend.dynamo.hook", Conf),
  lists:map(
    fun({[_, _, _,Name1,Name2, _], Val}) ->
    {lists:concat([Name1,".",Name2]), list_to_binary(Val)}
  end, Hooks)
end}.
