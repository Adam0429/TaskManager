%%-*- mode: erlang -*-
%% emqx_backend_mongo config mapping
{mapping, "backend.mongo.topology.$name", "emqx_backend_mongo.pools", [
  {datatype, integer}
]}.

{mapping, "backend.mongo.$name.type", "emqx_backend_mongo.pools", [
  {default, single},
  {datatype, {enum, [single, unknown, sharded, rs]}}
]}.

{mapping, "backend.mongo.$name.rs_set_name", "emqx_backend_mongo.pools", [
  {default, "mqtt"},
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.server", "emqx_backend_mongo.pools", [
  {default, "127.0.0.1:27017"},
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.c_pool_size", "emqx_backend_mongo.pools", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "backend.mongo.$name.login", "emqx_backend_mongo.pools", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.password", "emqx_backend_mongo.pools", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.auth_source", "emqx_backend_mongo.pools", [
  {default, "mqtt"},
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.database", "emqx_backend_mongo.pools", [
  {default, "mqtt"},
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.ssl", "emqx_backend_mongo.pools", [
  {default, false},
  {datatype, {enum, [true, false]}}
]}.

{mapping, "backend.mongo.$name.keyfile", "emqx_backend_mongo.pools", [
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.certfile", "emqx_backend_mongo.pools", [
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.cacertfile", "emqx_backend_mongo.pools", [
  {datatype, string}
]}.

{mapping, "backend.mongo.$name.w_mode", "emqx_backend_mongo.pools", [
  {default, undef},
  {datatype, {enum, [safe, unsafe, undef]}}
]}.

{mapping, "backend.mongo.$name.r_mode", "emqx_backend_mongo.pools", [
  {default, undef},
  {datatype, {enum, [master, slave_ok, undef]}}
]}.

{translation, "emqx_backend_mongo.pools", fun(Conf) ->
  Vars = cuttlefish_variable:fuzzy_matches(["backend", "mongo", "$name", "server"], Conf),
  Key = fun(Name, Attr) -> string:join(["backend.mongo", Name, Attr], ".") end,
  lists:map(fun({_, Name}) ->
    Type0 = cuttlefish:conf_get(Key(Name, "type"), Conf),
    Type = case Type0 =:= rs of
        true -> {Type0, list_to_binary(cuttlefish:conf_get(Key(Name, "rs_set_name"), Conf))};
        false -> Type0
        end,

    H = cuttlefish:conf_get(Key(Name, "server"), Conf),
    Hosts = string:tokens(H, ","),

    Vars1 = cuttlefish_variable:fuzzy_matches(["backend", "mongo", "topology", "$name"], Conf),
    Options = lists:map(fun({_, TName}) ->
        Name2 = case TName of
                "local_threshold_ms"          -> "localThresholdMS";
                "connect_timeout_ms"          -> "connectTimeoutMS";
                "socket_timeout_ms"           -> "socketTimeoutMS";
                "server_selection_timeout_ms" -> "serverSelectionTimeoutMS";
                "wait_queue_timeout_ms"       -> "waitQueueTimeoutMS";
                "heartbeat_frequency_ms"      -> "heartbeatFrequencyMS";
                "min_heartbeat_frequency_ms"  -> "minHeartbeatFrequencyMS";
                _ -> TName
                end,
    {list_to_atom(Name2), cuttlefish:conf_get(Key("topology", TName), Conf)}
  end, Vars1),
  Login = cuttlefish:conf_get(Key(Name, "login"), Conf),
  Passwd = cuttlefish:conf_get(Key(Name, "password"), Conf),
  DB = cuttlefish:conf_get(Key(Name, "database"), Conf),
  AuthSrc = cuttlefish:conf_get(Key(Name, "auth_source"), Conf),
  R = cuttlefish:conf_get(Key(Name, "w_mode"), Conf),
  W = cuttlefish:conf_get(Key(Name, "r_mode"), Conf),
  Login0 = case Login =:= [] of
    true -> [];
    false -> [{login, list_to_binary(Login)}]
  end,
  Passwd0 = case Passwd =:= [] of
    true -> [];
    false -> [{password, list_to_binary(Passwd)}]
  end,
  W0 = case W =:= undef of
    true -> [];
    false -> [{w_mode, W}]
  end,
  R0 = case R =:= undef  of
    true -> [];
    false -> [{r_mode, R}]
  end,
  Pool = cuttlefish:conf_get(Key(Name, "c_pool_size"), Conf),

  Ssl = case cuttlefish:conf_get(Key(Name, "ssl"), Conf) of
    true ->
      Filter  = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,
      SslOpts = fun() ->
                    Filter([{keyfile,    cuttlefish:conf_get(Key(Name, "keyfile"), Conf, undefined)},
                            {certfile,   cuttlefish:conf_get(Key(Name, "certfile"), Conf, undefined)},
                            {cacertfile, cuttlefish:conf_get(Key(Name, "cacertfile"), Conf, undefined)}])
                end,
      [{ssl, true}, {ssl_opts, SslOpts()}];
    false ->
      [{ssl, false}]
  end,
  WorkerOptions = [{database, list_to_binary(DB)}, {auth_source, list_to_binary(AuthSrc)}] ++ Login0 ++ Passwd0 ++ W0 ++ R0 ++ Ssl,
  {list_to_atom(Name), [{type, Type},
                        {hosts, Hosts},
                        {options, Options},
                        {worker_options, WorkerOptions},
                       %{auto_reconnect, 1},
                        {pool_size, Pool}]}
  end, Vars)
end}.

{mapping, "backend.mongo.hook.client.connected.$name", "emqx_backend_mongo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.mongo.hook.client.disconnected.$name", "emqx_backend_mongo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.mongo.hook.session.subscribed.$name", "emqx_backend_mongo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.mongo.hook.session.unsubscribed.$name", "emqx_backend_mongo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.mongo.hook.message.publish.$name", "emqx_backend_mongo.hooks", [
  {datatype, string}
]}.

{mapping, "backend.mongo.hook.message.acked.$name", "emqx_backend_mongo.hooks", [
  {datatype, string}
]}.

{translation, "emqx_backend_mongo.hooks", fun(Conf) ->
  Hooks = cuttlefish_variable:filter_by_prefix("backend.mongo.hook", Conf),
  lists:map(
    fun({[_, _, _,Name1,Name2, _], Val}) ->
    {lists:concat([Name1,".",Name2]), list_to_binary(Val)}
  end, Hooks)
end}.

