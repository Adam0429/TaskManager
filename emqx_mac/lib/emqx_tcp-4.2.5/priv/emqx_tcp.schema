%%-*- mode: erlang -*-
%% emqx_tcp config mapping

{mapping, "tcp.proto.idle_timeout", "emqx_tcp.idle_timeout", [
  {datatype, {duration, ms}}
]}.

{mapping, "tcp.proto.up_topic", "emqx_tcp.up_topic", [
  {datatype, string}
]}.

{mapping, "tcp.proto.dn_topic", "emqx_tcp.dn_topic", [
  {datatype, string}
]}.

{mapping, "tcp.proto.max_packet_size", "emqx_tcp.max_packet_size", [
  {datatype, integer}
]}.

{mapping, "tcp.proto.enable_stats", "emqx_tcp.enable_stats", [
  {default, off},
  {datatype, flag}
]}.

{mapping, "tcp.proto.force_gc_policy", "emqx_tcp.force_gc_policy", [
   {default, "0 | 0MB"},
   {datatype, string}
]}.

{translation, "emqx_tcp.force_gc_policy", fun(Conf) ->
  [Count, Bytes] = string:tokens(cuttlefish:conf_get("tcp.proto.force_gc_policy", Conf), "| "),
  case cuttlefish_bytesize:parse(Bytes) of
      {error, Reason} ->
          error(Reason);
      Bytes1 ->
          #{bytes => Bytes1,
            count => list_to_integer(Count)}
  end
end}.

{mapping, "tcp.proto.force_shutdown_policy", "emqx_tcp.force_shutdown_policy", [
   {default, "default"},
   {datatype, string}
]}.

{translation, "emqx_tcp.force_shutdown_policy", fun(Conf) ->
  case cuttlefish:conf_get("tcp.proto.force_shutdown_policy", Conf) of
    "default" ->
           {DefaultLen, DefaultSize} =
           case erlang:system_info(wordsize) of
               8 -> % arch_64
                   {8000, cuttlefish_bytesize:parse("800MB")};
               4 -> % arch_32
                   {1000, cuttlefish_bytesize:parse("100MB")}
           end,
           #{message_queue_len => DefaultLen, max_heap_size => DefaultSize};
      Val ->
          [Len, Siz] = string:tokens(Val, "| "),
          MaxSiz = case erlang:system_info(wordsize) of
                       8 -> % arch_64
                           (1 bsl 59) - 1;
                       4 -> % arch_32
                           (1 bsl 27) - 1
                   end,
          case cuttlefish_bytesize:parse(Siz) of
              {error, Reason} ->
                  error(Reason);
              Siz1 when Siz1 > MaxSiz ->
                  cuttlefish:invalid(
                    io_lib:format("force_shutdown_policy: heap-size ~s is too large", [Siz]));
              Siz1 ->
                  #{message_queue_len => list_to_integer(Len),
                    max_heap_size => Siz1}
          end
  end
end}.

{mapping, "tcp.listener.$name", "emqx_tcp.listeners", [
  {datatype, [integer, ip]}
]}.

{mapping, "tcp.listener.$name.acceptors", "emqx_tcp.listeners", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "tcp.listener.$name.max_connections", "emqx_tcp.listeners", [
  {default, 1024},
  {datatype, integer}
]}.

{mapping, "tcp.listener.$name.max_conn_rate", "emqx_tcp.listeners", [
  {datatype, integer}
]}.

{mapping, "tcp.listener.$name.active_n", "emqx_tcp.listeners", [
  {default, 100},
  {datatype, integer}
]}.

{mapping, "tcp.listener.$name.rate_limit", "emqx_tcp.listeners", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "tcp.listener.$name.access.$id", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.$name.proxy_protocol", "emqx_tcp.listeners", [
  {datatype, flag}
]}.

{mapping, "tcp.listener.$name.proxy_protocol_timeout", "emqx_tcp.listeners", [
  {datatype, {duration, ms}}
]}.

{mapping, "tcp.listener.$name.backlog", "emqx_tcp.listeners", [
  {datatype, integer},
  {default, 1024}
]}.

{mapping, "tcp.listener.$name.send_timeout", "emqx_tcp.listeners", [
  {datatype, {duration, ms}},
  {default, "15s"}
]}.

{mapping, "tcp.listener.$name.send_timeout_close", "emqx_tcp.listeners", [
  {datatype, flag},
  {default, on}
]}.

{mapping, "tcp.listener.$name.recbuf", "emqx_tcp.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "tcp.listener.$name.sndbuf", "emqx_tcp.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "tcp.listener.$name.buffer", "emqx_tcp.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "tcp.listener.$name.tune_buffer", "emqx_tcp.listeners", [
  {datatype, flag},
  hidden
]}.

{mapping, "tcp.listener.$name.nodelay", "emqx_tcp.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

{mapping, "tcp.listener.$name.reuseaddr", "emqx_tcp.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

{mapping, "tcp.listener.ssl.$name", "emqx_tcp.listeners", [
  {datatype, [integer, ip]}
]}.

{mapping, "tcp.listener.ssl.$name.acceptors", "emqx_tcp.listeners", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "tcp.listener.ssl.$name.max_connections", "emqx_tcp.listeners", [
  {default, 1024},
  {datatype, integer}
]}.

{mapping, "tcp.listener.ssl.$name.max_conn_rate", "emqx_tcp.listeners", [
  {datatype, integer}
]}.

{mapping, "tcp.listener.ssl.$name.active_n", "emqx_tcp.listeners", [
  {default, 100},
  {datatype, integer}
]}.

{mapping, "tcp.listener.ssl.$name.rate_limit", "emqx_tcp.listeners", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.access.$id", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.proxy_protocol", "emqx_tcp.listeners", [
  {datatype, flag}
]}.

{mapping, "tcp.listener.ssl.$name.proxy_protocol_timeout", "emqx_tcp.listeners", [
  {datatype, {duration, ms}}
]}.

{mapping, "tcp.listener.ssl.$name.tls_versions", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.handshake_timeout", "emqx_tcp.listeners", [
  {default, "15s"},
  {datatype, {duration, ms}}
]}.

{mapping, "tcp.listener.ssl.$name.keyfile", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.certfile", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.cacertfile", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.dhfile", "emqx_tcp.listeners", [
  {datatype, string}
]}.


{mapping, "tcp.listener.ssl.$name.verify", "emqx_tcp.listeners", [
  {datatype, atom}
]}.

{mapping, "tcp.listener.ssl.$name.fail_if_no_peer_cert", "emqx_tcp.listeners", [
  {datatype, {enum, [true, false]}}
]}.

{mapping, "tcp.listener.ssl.$name.ciphers", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.psk_ciphers", "emqx_tcp.listeners", [
  {datatype, string}
]}.

{mapping, "tcp.listener.ssl.$name.secure_renegotiate", "emqx_tcp.listeners", [
  {datatype, flag}
]}.

{mapping, "tcp.listener.ssl.$name.reuse_sessions", "emqx_tcp.listeners", [
  {default, on},
  {datatype, flag}
]}.

{mapping, "tcp.listener.ssl.$name.honor_cipher_order", "emqx_tcp.listeners", [
  {datatype, flag}
]}.

{mapping, "tcp.listener.ssl.$name.backlog", "emqx_tcp.listeners", [
  {datatype, integer},
  {default, 1024}
]}.

{mapping, "tcp.listener.ssl.$name.send_timeout", "emqx_tcp.listeners", [
  {datatype, {duration, ms}},
  {default, "15s"}
]}.

{mapping, "tcp.listener.ssl.$name.send_timeout_close", "emqx_tcp.listeners", [
  {datatype, flag},
  {default, on}
]}.

{mapping, "tcp.listener.ssl.$name.recbuf", "emqx_tcp.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "tcp.listener.ssl.$name.sndbuf", "emqx_tcp.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "tcp.listener.ssl.$name.buffer", "emqx_tcp.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "tcp.listener.ssl.$name.tune_buffer", "emqx_tcp.listeners", [
  {datatype, flag},
  hidden
]}.

{mapping, "tcp.listener.ssl.$name.nodelay", "emqx_tcp.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

{mapping, "tcp.listener.ssl.$name.reuseaddr", "emqx_tcp.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.


{translation, "emqx_tcp.listeners", fun(Conf) ->

    Filter  = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,

    Atom = fun(undefined) -> undefined; (S) -> list_to_atom(S) end,

    Access = fun(S) ->
                 [A, CIDR] = string:tokens(S, " "),
                 {list_to_atom(A), case CIDR of "all" -> all; _ -> CIDR end}
             end,

    AccOpts = fun(Prefix) ->
                  case cuttlefish_variable:filter_by_prefix(Prefix ++ ".access", Conf) of
                      [] -> [];
                      Rules -> [{access_rules, [Access(Rule) || {_, Rule} <- Rules]}]
                  end
              end,

    Ratelimit = fun(undefined) ->
                    undefined;
                   (S) ->
                    list_to_tuple([list_to_integer(Token) || Token <- string:tokens(S, ",")])
                end,

    LisOpts = fun(Prefix) ->
                  Filter([{acceptors, cuttlefish:conf_get(Prefix ++ ".acceptors", Conf)},
                          {mqtt_path, cuttlefish:conf_get(Prefix ++ ".mqtt_path", Conf, undefined)},
                          {max_connections, cuttlefish:conf_get(Prefix ++ ".max_connections", Conf)},
                          {max_conn_rate, cuttlefish:conf_get(Prefix ++ ".max_conn_rate", Conf, undefined)},
                          {active_n, cuttlefish:conf_get(Prefix ++ ".active_n", Conf, undefined)},
                          {tune_buffer, cuttlefish:conf_get(Prefix ++ ".tune_buffer", Conf, undefined)},
                          {rate_limit, Ratelimit(cuttlefish:conf_get(Prefix ++ ".rate_limit", Conf, undefined))},
                          {proxy_protocol, cuttlefish:conf_get(Prefix ++ ".proxy_protocol", Conf, undefined)},
                          {proxy_protocol_timeout, cuttlefish:conf_get(Prefix ++ ".proxy_protocol_timeout", Conf, undefined)},
                          {verify_protocol_header, cuttlefish:conf_get(Prefix ++ ".verify_protocol_header", Conf, undefined)},
                          {proxy_port_header, cuttlefish:conf_get(Prefix ++ ".proxy_port_header", Conf, undefined)},
                          {compress, cuttlefish:conf_get(Prefix ++ ".compress", Conf, undefined)},
                          {idle_timeout, cuttlefish:conf_get(Prefix ++ ".idle_timeout", Conf, undefined)},
                          {max_frame_size, cuttlefish:conf_get(Prefix ++ ".max_frame_size", Conf, undefined)},
                          {proxy_address_header, cuttlefish:conf_get(Prefix ++ ".proxy_address_header", Conf, undefined)} | AccOpts(Prefix)])
              end,
    DeflateOpts = fun(Prefix) ->
                      Filter([{level, cuttlefish:conf_get(Prefix ++ ".deflate_opts.level", Conf, undefined)},
                              {mem_level, cuttlefish:conf_get(Prefix ++ ".deflate_opts.mem_level", Conf, undefined)},
                              {strategy, cuttlefish:conf_get(Prefix ++ ".deflate_opts.strategy", Conf, undefined)},
                              {server_context_takeover, cuttlefish:conf_get(Prefix ++ ".deflate_opts.server_context_takeover", Conf, undefined)},
                              {client_context_takeover, cuttlefish:conf_get(Prefix ++ ".deflate_opts.client_context_takeover", Conf, undefined)},
                              {server_max_windows_bits, cuttlefish:conf_get(Prefix ++ ".deflate_opts.server_max_window_bits", Conf, undefined)},
                              {client_max_windows_bits, cuttlefish:conf_get(Prefix ++ ".deflate_opts.client_max_window_bits", Conf, undefined)}])
                  end,
    TcpOpts = fun(Prefix) ->
                  Filter([{backlog, cuttlefish:conf_get(Prefix ++ ".backlog", Conf, undefined)},
                          {send_timeout, cuttlefish:conf_get(Prefix ++ ".send_timeout", Conf, undefined)},
                          {send_timeout_close, cuttlefish:conf_get(Prefix ++ ".send_timeout_close", Conf, undefined)},
                          {recbuf,  cuttlefish:conf_get(Prefix ++ ".recbuf", Conf, undefined)},
                          {sndbuf,  cuttlefish:conf_get(Prefix ++ ".sndbuf", Conf, undefined)},
                          {buffer,  cuttlefish:conf_get(Prefix ++ ".buffer", Conf, undefined)},
                          {nodelay, cuttlefish:conf_get(Prefix ++ ".nodelay", Conf, true)},
                          {reuseaddr, cuttlefish:conf_get(Prefix ++ ".reuseaddr", Conf, undefined)}])
              end,
    SplitFun = fun(undefined) -> undefined; (S) -> string:tokens(S, ",") end,
    MapPSKCiphers = fun(PSKCiphers) ->
                      lists:map(
                          fun("PSK-AES128-CBC-SHA") -> {psk, aes_128_cbc, sha};
                             ("PSK-AES256-CBC-SHA") -> {psk, aes_256_cbc, sha};
                             ("PSK-3DES-EDE-CBC-SHA") -> {psk, '3des_ede_cbc', sha};
                             ("PSK-RC4-SHA") -> {psk, rc4_128, sha}
                          end, PSKCiphers)
                    end,
    SslOpts = fun(Prefix) ->
                  Versions = case SplitFun(cuttlefish:conf_get(Prefix ++ ".tls_versions", Conf, undefined)) of
                                undefined -> undefined;
                                L -> [list_to_atom(V) || V <- L]
                            end,
                  TLSCiphers = cuttlefish:conf_get(Prefix++".ciphers", Conf, undefined),
                  PSKCiphers = cuttlefish:conf_get(Prefix++".psk_ciphers", Conf, undefined),
                  Ciphers =
                    case {TLSCiphers, PSKCiphers} of
                      {undefined, undefined} ->
                        cuttlefish:invalid(Prefix++".ciphers or "++Prefix++".psk_ciphers is absent");
                      {TLSCiphers, undefined} ->
                        SplitFun(TLSCiphers);
                      {undefined, PSKCiphers} ->
                        MapPSKCiphers(SplitFun(PSKCiphers));
                      {_TLSCiphers, _PSKCiphers} ->
                        cuttlefish:invalid(Prefix++".ciphers and "++Prefix++".psk_ciphers cannot be configured at the same time")
                    end,
                  UserLookupFun =
                    case PSKCiphers of
                      undefined -> undefined;
                      _ -> {fun emqx_psk:lookup/3, <<>>}
                    end,
                  Filter([{versions, Versions},
                          {ciphers, Ciphers},
                          {user_lookup_fun, UserLookupFun},
                          {handshake_timeout, cuttlefish:conf_get(Prefix ++ ".handshake_timeout", Conf, undefined)},
                          {dhfile, cuttlefish:conf_get(Prefix ++ ".dhfile", Conf, undefined)},
                          {keyfile,    cuttlefish:conf_get(Prefix ++ ".keyfile", Conf, undefined)},
                          {certfile,   cuttlefish:conf_get(Prefix ++ ".certfile", Conf, undefined)},
                          {cacertfile, cuttlefish:conf_get(Prefix ++ ".cacertfile", Conf, undefined)},
                          {verify,     cuttlefish:conf_get(Prefix ++ ".verify", Conf, undefined)},
                          {fail_if_no_peer_cert, cuttlefish:conf_get(Prefix ++ ".fail_if_no_peer_cert", Conf, undefined)},
                          {secure_renegotiate, cuttlefish:conf_get(Prefix ++ ".secure_renegotiate", Conf, undefined)},
                          {reuse_sessions, cuttlefish:conf_get(Prefix ++ ".reuse_sessions", Conf, undefined)},
                          {honor_cipher_order, cuttlefish:conf_get(Prefix ++ ".honor_cipher_order", Conf, undefined)}])
              end,

    TcpListeners = fun(Name) ->
                       Prefix = string:join(["tcp", "listener", Name], "."),
                       case cuttlefish:conf_get(Prefix, Conf, undefined) of
                           undefined -> [];
                           ListenOn  ->
                               [{tcp, ListenOn, [{deflate_options, DeflateOpts(Prefix)},
                                                 {tcp_options, TcpOpts(Prefix)} | LisOpts(Prefix)]}]
                       end
                   end,

    SslListeners = fun(Type, Name) ->
                       Prefix = string:join(["tcp", "listener", Type, Name], "."),
                       case cuttlefish:conf_get(Prefix, Conf, undefined) of
                           undefined ->
                               [];
                           ListenOn ->
                               [{ssl, ListenOn, [{deflate_options, DeflateOpts(Prefix)},
                                                 {tcp_options, TcpOpts(Prefix)},
                                                 {ssl_options, SslOpts(Prefix)} | LisOpts(Prefix)]}]
                       end
                   end,

    lists:flatten([TcpListeners(Name) || {["tcp", "listener", Name], ListenOn}
                                               <- cuttlefish_variable:filter_by_prefix("tcp.listener", Conf)]
                  ++
                  [SslListeners(Type, Name) || {["tcp", "listener", Type, Name], ListenOn}
                                               <- cuttlefish_variable:filter_by_prefix("tcp.listener.ssl", Conf)])
end}.

