%%-*- mode: erlang -*-
%% emqx_jt808 config mapping

{mapping, "jt808.proto.registray", "emqx_jt808.proto", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "jt808.proto.authentication", "emqx_jt808.proto", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "jt808.proto.allow_anonymous", "emqx_jt808.proto", [
  {default, true},
  {datatype, {enum, [true, false]}}
]}.

{mapping, "jt808.proto.dn_topic", "emqx_jt808.proto", [
  {datatype, string}
]}.

{mapping, "jt808.proto.up_topic", "emqx_jt808.proto", [
  {datatype, string}
]}.

{translation, "emqx_jt808.proto", fun(Conf) ->
    Pfx = "jt808.proto",
    SafeGet = fun(K, C) ->
                  case cuttlefish:conf_get(K, C) of
                      undefined -> cuttlefish:invalid(K ++ "is undefined.");
                      V -> V
                  end
              end,
    AuthAttrs = case SafeGet(Pfx ++ ".allow_anonymous", Conf) of
                    true -> [{allow_anonymous, true}];
                    false ->
                        [{registray, SafeGet(Pfx ++ ".registray", Conf)},
                         {authentication, SafeGet(Pfx ++ ".authentication", Conf)} | [{allow_anonymous, false}]]
                end,

    [{up_topic, SafeGet(Pfx ++ ".up_topic", Conf)},
     {dn_topic, SafeGet(Pfx ++ ".dn_topic", Conf)} | AuthAttrs]
end}.

%% @doc Connection Idle Timeout.
{mapping, "jt808.conn.idle_timeout", "emqx_jt808.conn_idle_timeout", [
  {default, "30s"},
  {datatype, {duration, ms}}
]}.

%% @doc Enable Stats of Connection.
{mapping, "jt808.conn.enable_stats", "emqx_jt808.conn_enable_stats", [
  {default, on},
  {datatype, flag}
]}.

{mapping, "jt808.frame.max_length", "emqx_jt808.max_frame_length", [
  %%{default, 8192},
  {datatype, integer}
]}.

{mapping, "jt808.listener.tcp", "emqx_jt808.listeners", [
  %%{default, 18083},
  {datatype, [integer, ip]}
]}.

{mapping, "jt808.listener.tcp.acceptors", "emqx_jt808.listeners", [
  {default, 4},
  {datatype, integer}
]}.

{mapping, "jt808.listener.tcp.max_clients", "emqx_jt808.listeners", [
  {default, 512},
  {datatype, integer}
]}.

{mapping, "jt808.listener.ssl", "emqx_jt808.listeners", [
  %%{default, 18084},
  {datatype, [integer, ip]}
]}.

{mapping, "jt808.listener.ssl.acceptors", "emqx_jt808.listeners", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "jt808.listener.ssl.max_clients", "emqx_jt808.listeners", [
  {default, 64},
  {datatype, integer}
]}.

{mapping, "jt808.listener.ssl.handshake_timeout", "emqx_jt808.listeners", [
  {default, 15},
  {datatype, integer}
]}.

{mapping, "jt808.listener.ssl.keyfile", "emqx_jt808.listeners", [
  {datatype, string}
]}.

{mapping, "jt808.listener.ssl.certfile", "emqx_jt808.listeners", [
  {datatype, string}
]}.

{mapping, "jt808.listener.ssl.cacertfile", "emqx_jt808.listeners", [
  {datatype, string}
]}.

{mapping, "jt808.listener.ssl.verify", "emqx_jt808.listeners", [
  {datatype, string}
]}.

{mapping, "jt808.listener.ssl.fail_if_no_peer_cert", "emqx_jt808.listeners", [
  {datatype, {enum, [true, false]}}
]}.

{translation, "emqx_jt808.listeners", fun(Conf) ->
  Filter = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,
  Opts = fun(Prefix) ->
             Filter([{acceptors,   cuttlefish:conf_get(Prefix ++ ".acceptors", Conf)},
                     {max_clients, cuttlefish:conf_get(Prefix ++ ".max_clients", Conf)}])
         end,
  SslOpts = fun(Prefix) ->
                Filter([{handshake_timeout, cuttlefish:conf_get(Prefix ++ ".handshake_timeout", Conf) * 1000},
                        {keyfile,    cuttlefish:conf_get(Prefix ++ ".keyfile", Conf, undefined)},
                        {certfile,   cuttlefish:conf_get(Prefix ++ ".certfile", Conf, undefined)},
                        {cacertfile, cuttlefish:conf_get(Prefix ++ ".cacertfile", Conf, undefined)},
                        {verify,     cuttlefish:conf_get(Prefix ++ ".verify", Conf, undefined)},
                        {fail_if_no_peer_cert, cuttlefish:conf_get(Prefix ++ ".fail_if_no_peer_cert", Conf, undefined)}])
              end,
  lists:append([
      case cuttlefish:conf_get("jt808.listener.tcp", Conf, undefined) of
          undefined -> [];
          TcpPort   -> [{tcp, TcpPort, Opts("jt808.listener.tcp")}]
      end,
      case cuttlefish:conf_get("jt808.listener.ssl", Conf, undefined) of
          undefined -> [];
          SslPort   -> [{ssl, SslPort, [{sslopts, SslOpts("jt808.listener.ssl")} | Opts("jt808.listener.ssl")]}]
      end])
end}.

