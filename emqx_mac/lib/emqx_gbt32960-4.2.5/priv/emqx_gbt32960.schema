%%-*- mode: erlang -*-

{mapping, "gbt32960.conn.idle_timeout", "emqx_gbt32960.conn_idle_timeout", [
  {default, "30s"},
  {datatype, {duration, ms}}
]}.

{mapping, "gbt32960.frame.max_length", "emqx_gbt32960.max_frame_length", [
  {datatype, integer}
]}.

{mapping, "gbt32960.proto.retx_interval", "emqx_gbt32960.retx_interval", [
  {default, "8s"},
  {datatype, {duration, ms}}
]}.

{mapping, "gbt32960.proto.retx_max_times", "emqx_gbt32960.retx_max_times", [
  {default, 3},
  {datatype, integer}
]}.

{mapping, "gbt32960.proto.message_queue_len", "emqx_gbt32960.message_queue_len", [
  {default, 10},
  {datatype, integer}
]}.

%%--------------------------------------------------------------------
%% Listeners

{mapping, "gbt32960.listener.tcp", "emqx_gbt32960.listeners", [
  {datatype, [integer, ip]}
]}.

{mapping, "gbt32960.listener.tcp.acceptors", "emqx_gbt32960.listeners", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.tcp.max_connections", "emqx_gbt32960.listeners", [
  {default, 1024},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.tcp.max_conn_rate", "emqx_gbt32960.listeners", [
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.tcp.idle_timeout", "emqx_gbt32960.listeners", [
  {datatype, {duration, ms}},
  hidden
]}.

{mapping, "gbt32960.listener.tcp.active_n", "emqx_gbt32960.listeners", [
  {default, 100},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.tcp.zone", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.tcp.rate_limit", "emqx_gbt32960.listeners", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "gbt32960.listener.tcp.access.$id", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.tcp.proxy_protocol", "emqx_gbt32960.listeners", [
  {datatype, flag}
]}.

{mapping, "gbt32960.listener.tcp.proxy_protocol_timeout", "emqx_gbt32960.listeners", [
  {datatype, {duration, ms}}
]}.

{mapping, "gbt32960.listener.tcp.backlog", "emqx_gbt32960.listeners", [
  {datatype, integer},
  {default, 1024}
]}.

{mapping, "gbt32960.listener.tcp.send_timeout", "emqx_gbt32960.listeners", [
  {datatype, {duration, ms}},
  {default, "15s"}
]}.

{mapping, "gbt32960.listener.tcp.send_timeout_close", "emqx_gbt32960.listeners", [
  {datatype, flag},
  {default, on}
]}.

{mapping, "gbt32960.listener.tcp.recbuf", "emqx_gbt32960.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "gbt32960.listener.tcp.sndbuf", "emqx_gbt32960.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "gbt32960.listener.tcp.buffer", "emqx_gbt32960.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "gbt32960.listener.tcp.tune_buffer", "emqx_gbt32960.listeners", [
  {datatype, flag},
  hidden
]}.

{mapping, "gbt32960.listener.tcp.nodelay", "emqx_gbt32960.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

{mapping, "gbt32960.listener.tcp.reuseaddr", "emqx_gbt32960.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

%%--------------------------------------------------------------------
%% SSL Listeners

{mapping, "gbt32960.listener.ssl", "emqx_gbt32960.listeners", [
  {datatype, [integer, ip]}
]}.

{mapping, "gbt32960.listener.ssl.acceptors", "emqx_gbt32960.listeners", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.ssl.max_connections", "emqx_gbt32960.listeners", [
  {default, 1024},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.ssl.max_conn_rate", "emqx_gbt32960.listeners", [
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.ssl.idle_timeout", "emqx_gbt32960.listeners", [
  {datatype, {duration, ms}},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.active_n", "emqx_gbt32960.listeners", [
  {default, 100},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.ssl.zone", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.rate_limit", "emqx_gbt32960.listeners", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.access.$id", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.proxy_protocol", "emqx_gbt32960.listeners", [
  {datatype, flag}
]}.

{mapping, "gbt32960.listener.ssl.proxy_protocol_timeout", "emqx_gbt32960.listeners", [
  {datatype, {duration, ms}}
]}.

{mapping, "gbt32960.listener.ssl.backlog", "emqx_gbt32960.listeners", [
  {default, 1024},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.ssl.send_timeout", "emqx_gbt32960.listeners", [
  {datatype, {duration, ms}},
  {default, "15s"}
]}.

{mapping, "gbt32960.listener.ssl.send_timeout_close", "emqx_gbt32960.listeners", [
  {datatype, flag},
  {default, on}
]}.

{mapping, "gbt32960.listener.ssl.recbuf", "emqx_gbt32960.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.sndbuf", "emqx_gbt32960.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.buffer", "emqx_gbt32960.listeners", [
  {datatype, bytesize},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.tune_buffer", "emqx_gbt32960.listeners", [
  {datatype, flag},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.nodelay", "emqx_gbt32960.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.reuseaddr", "emqx_gbt32960.listeners", [
  {datatype, {enum, [true, false]}},
  hidden
]}.

{mapping, "gbt32960.listener.ssl.tls_versions", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.ciphers", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.psk_ciphers", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.handshake_timeout", "emqx_gbt32960.listeners", [
  {default, "15s"},
  {datatype, {duration, ms}}
]}.

{mapping, "gbt32960.listener.ssl.depth", "emqx_gbt32960.listeners", [
  {default, 10},
  {datatype, integer}
]}.

{mapping, "gbt32960.listener.ssl.key_password", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.dhfile", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.keyfile", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.certfile", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.cacertfile", "emqx_gbt32960.listeners", [
  {datatype, string}
]}.

{mapping, "gbt32960.listener.ssl.verify", "emqx_gbt32960.listeners", [
  {datatype, atom}
]}.

{mapping, "gbt32960.listener.ssl.fail_if_no_peer_cert", "emqx_gbt32960.listeners", [
  {datatype, {enum, [true, false]}}
]}.

{mapping, "gbt32960.listener.ssl.secure_renegotiate", "emqx_gbt32960.listeners", [
  {datatype, flag}
]}.

{mapping, "gbt32960.listener.ssl.reuse_sessions", "emqx_gbt32960.listeners", [
  {default, on},
  {datatype, flag}
]}.

{mapping, "gbt32960.listener.ssl.honor_cipher_order", "emqx_gbt32960.listeners", [
  {datatype, flag}
]}.

{translation, "emqx_gbt32960.listeners", fun(Conf) ->

    Filter  = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,

    Atom = fun(undefined) -> undefined; (S) -> list_to_atom(S) end,

    Access = fun(S) ->
                 [A, CIDR] = string:tokens(S, " "),
                 {list_to_atom(A), case CIDR of "all" -> all; _ -> CIDR end}
             end,

    AccOpts = fun(Prefix) ->
                  case cuttlefish_variable:filter_by_prefix(Prefix ++ ".access", Conf) of
                      [] -> [];
                      Rules -> [{access_rules, [Access(Rule) || {_, Rule} <- Rules]}]
                  end
              end,

    RateLimit = fun(undefined) ->
                        undefined;
                   (Val) ->
                        [L, D] = string:tokens(Val, ", "),
                        Limit = case cuttlefish_bytesize:parse(L) of
                                    Sz when is_integer(Sz) -> Sz;
                                    {error, Reason} -> error(Reason)
                                end,
                        Duration = case cuttlefish_duration:parse(D, s) of
                                       Secs when is_integer(Secs) -> Secs;
                                       {error, Reason1} -> error(Reason1)
                                   end,
                        {Limit, Duration}
                end,

    LisOpts = fun(Prefix) ->
                  Filter([{acceptors, cuttlefish:conf_get(Prefix ++ ".acceptors", Conf)},
                          {mqtt_path, cuttlefish:conf_get(Prefix ++ ".mqtt_path", Conf, undefined)},
                          {max_connections, cuttlefish:conf_get(Prefix ++ ".max_connections", Conf)},
                          {max_conn_rate, cuttlefish:conf_get(Prefix ++ ".max_conn_rate", Conf, undefined)},
                          {active_n, cuttlefish:conf_get(Prefix ++ ".active_n", Conf, undefined)},
                          {tune_buffer, cuttlefish:conf_get(Prefix ++ ".tune_buffer", Conf, undefined)},
                          {zone, Atom(cuttlefish:conf_get(Prefix ++ ".zone", Conf, undefined))},
                          {rate_limit, RateLimit(cuttlefish:conf_get(Prefix ++ ".rate_limit", Conf, undefined))},
                          {proxy_protocol, cuttlefish:conf_get(Prefix ++ ".proxy_protocol", Conf, undefined)},
                          {proxy_protocol_timeout, cuttlefish:conf_get(Prefix ++ ".proxy_protocol_timeout", Conf, undefined)},
                          {idle_timeout, cuttlefish:conf_get(Prefix ++ ".idle_timeout", Conf, undefined)} | AccOpts(Prefix)])
              end,
    TcpOpts = fun(Prefix) ->
                  Filter([{backlog, cuttlefish:conf_get(Prefix ++ ".backlog", Conf, undefined)},
                          {send_timeout, cuttlefish:conf_get(Prefix ++ ".send_timeout", Conf, undefined)},
                          {send_timeout_close, cuttlefish:conf_get(Prefix ++ ".send_timeout_close", Conf, undefined)},
                          {recbuf,  cuttlefish:conf_get(Prefix ++ ".recbuf", Conf, undefined)},
                          {sndbuf,  cuttlefish:conf_get(Prefix ++ ".sndbuf", Conf, undefined)},
                          {buffer,  cuttlefish:conf_get(Prefix ++ ".buffer", Conf, undefined)},
                          {nodelay, cuttlefish:conf_get(Prefix ++ ".nodelay", Conf, true)},
                          {reuseaddr, cuttlefish:conf_get(Prefix ++ ".reuseaddr", Conf, undefined)}])
              end,
    SplitFun = fun(undefined) -> undefined; (S) -> string:tokens(S, ",") end,
    MapPSKCiphers = fun(PSKCiphers) ->
                      lists:map(
                          fun("PSK-AES128-CBC-SHA") -> {psk, aes_128_cbc, sha};
                             ("PSK-AES256-CBC-SHA") -> {psk, aes_256_cbc, sha};
                             ("PSK-3DES-EDE-CBC-SHA") -> {psk, '3des_ede_cbc', sha};
                             ("PSK-RC4-SHA") -> {psk, rc4_128, sha}
                          end, PSKCiphers)
                    end,
    SslOpts = fun(Prefix) ->
                  Versions = case SplitFun(cuttlefish:conf_get(Prefix ++ ".tls_versions", Conf, undefined)) of
                                undefined -> undefined;
                                L -> [list_to_atom(V) || V <- L]
                            end,
                  TLSCiphers = cuttlefish:conf_get(Prefix++".ciphers", Conf, undefined),
                  PSKCiphers = cuttlefish:conf_get(Prefix++".psk_ciphers", Conf, undefined),
                  Ciphers =
                    case {TLSCiphers, PSKCiphers} of
                      {undefined, undefined} ->
                        cuttlefish:invalid(Prefix++".ciphers or "++Prefix++".psk_ciphers is absent");
                      {TLSCiphers, undefined} ->
                        SplitFun(TLSCiphers);
                      {undefined, PSKCiphers} ->
                        MapPSKCiphers(SplitFun(PSKCiphers));
                      {_TLSCiphers, _PSKCiphers} ->
                        cuttlefish:invalid(Prefix++".ciphers and "++Prefix++".psk_ciphers cannot be configured at the same time")
                    end,
                  UserLookupFun =
                    case PSKCiphers of
                      undefined -> undefined;
                      _ -> {fun emqx_psk:lookup/3, <<>>}
                    end,
                  Filter([{versions, Versions},
                          {ciphers, Ciphers},
                          {user_lookup_fun, UserLookupFun},
                          {handshake_timeout, cuttlefish:conf_get(Prefix ++ ".handshake_timeout", Conf, undefined)},
                          {depth, cuttlefish:conf_get(Prefix ++ ".depth", Conf, undefined)},
                          {password, cuttlefish:conf_get(Prefix ++ ".key_password", Conf, undefined)},
                          {dhfile, cuttlefish:conf_get(Prefix ++ ".dhfile", Conf, undefined)},
                          {keyfile,    cuttlefish:conf_get(Prefix ++ ".keyfile", Conf, undefined)},
                          {certfile,   cuttlefish:conf_get(Prefix ++ ".certfile", Conf, undefined)},
                          {cacertfile, cuttlefish:conf_get(Prefix ++ ".cacertfile", Conf, undefined)},
                          {verify,     cuttlefish:conf_get(Prefix ++ ".verify", Conf, undefined)},
                          {fail_if_no_peer_cert, cuttlefish:conf_get(Prefix ++ ".fail_if_no_peer_cert", Conf, undefined)},
                          {secure_renegotiate, cuttlefish:conf_get(Prefix ++ ".secure_renegotiate", Conf, undefined)},
                          {reuse_sessions, cuttlefish:conf_get(Prefix ++ ".reuse_sessions", Conf, undefined)},
                          {honor_cipher_order, cuttlefish:conf_get(Prefix ++ ".honor_cipher_order", Conf, undefined)}])
              end,

    TcpListeners = fun(Type) ->
                      Prefix = string:join(["gbt32960", "listener", Type], "."),
                      ListenOnN = case cuttlefish:conf_get(Prefix, Conf, undefined) of
                          undefined -> [];
                          ListenOn  ->
                              case ListenOn of
                                  {Ip, Port} ->
                                          case inet:parse_address(Ip) of
                                              {ok ,R} -> {R, Port};
                                              _ -> {Ip, Port}
                                          end;
                                  Other -> Other
                              end
                      end,
                      [{Atom(Type), ListenOnN, [{tcp_options, TcpOpts(Prefix)} | LisOpts(Prefix)]}]
                   end,
    SslListeners = fun(Type) ->
                       Prefix = string:join(["gbt32960", "listener", Type], "."),
                       case cuttlefish:conf_get(Prefix, Conf, undefined) of
                           undefined ->
                               [];
                           ListenOn ->
                               [{Atom(Type), ListenOn, [{tcp_options, TcpOpts(Prefix)},
                                                        {ssl_options, SslOpts(Prefix)} | LisOpts(Prefix)]}]
                       end
                   end,

    lists:flatten([TcpListeners(Type) || {["gbt32960", "listener", Type], ListenOn}
                                               <- cuttlefish_variable:filter_by_prefix("gbt32960.listener.tcp", Conf)]
                  ++
                  [SslListeners(Type) || {["gbt32960", "listener", Type], ListenOn}
                                               <- cuttlefish_variable:filter_by_prefix("gbt32960.listener.ssl", Conf)])
end}.
