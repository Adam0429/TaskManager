%%-*- mode: erlang -*-
%% emqx_backend_influxdb config mapping

{mapping, "backend.influxdb.$name.common.write_protocol", "emqx_backend_influxdb.pools", [
  {default, udp},
  {datatype, {enum, [udp, http]}}
]}.

{mapping, "backend.influxdb.$name.common.batch_size", "emqx_backend_influxdb.pools", [
  {default, 32},
  {datatype, integer}
]}.

{mapping, "backend.influxdb.$name.common.pool_size", "emqx_backend_influxdb.pools", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "backend.influxdb.$name.udp.host", "emqx_backend_influxdb.pools", [
  {default, "127.0.0.1"},
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.udp.port", "emqx_backend_influxdb.pools", [
  {default, 8089},
  {datatype, integer}
]}.

{mapping, "backend.influxdb.$name.http.host", "emqx_backend_influxdb.pools", [
  {default, "127.0.0.1"},
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.http.port", "emqx_backend_influxdb.pools", [
  {default, 8086},
  {datatype, integer}
]}.

{mapping, "backend.influxdb.$name.http.database", "emqx_backend_influxdb.pools", [
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.http.username", "emqx_backend_influxdb.pools", [
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.http.password", "emqx_backend_influxdb.pools", [
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.http.precision", "emqx_backend_influxdb.pools", [
  {default, ms},
  {datatype, {enum, [ns, us, ms, s, m, h]}}
]}.

{mapping, "backend.influxdb.$name.http.https_enabled", "emqx_backend_influxdb.pools", [
  {default, false},
  {datatype, {enum, [true, false]}}
]}.

{mapping, "backend.influxdb.$name.http.ssl.version", "emqx_backend_influxdb.pools", [
  {default, 'tlsv1.2'},
  {datatype, {enum, ['tlsv1.3', 'tlsv1.2', 'tlsv1.1', 'tlsv1']}}
]}.

{mapping, "backend.influxdb.$name.http.ssl.keyfile", "emqx_backend_influxdb.pools", [
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.http.ssl.certfile", "emqx_backend_influxdb.pools", [
  {datatype, string}
]}.

{mapping, "backend.influxdb.$name.http.ssl.cacertfile", "emqx_backend_influxdb.pools", [
  {datatype, string}
]}.

{translation, "emqx_backend_influxdb.pools", fun(Conf) ->
  PoolNames0 = [PoolName || {["backend", "influxdb", PoolName, _, _], _} <- cuttlefish_variable:filter_by_prefix("backend.influxdb", Conf)],
  PoolNames = lists:usort(PoolNames0),
  Join = fun(Parts) ->
                string:join(Parts, ".")
           end,
  Prefix = "backend.influxdb",
  Filter = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,
  lists:map(fun(PoolName) ->
    UDPOpts0 = [ {host, cuttlefish:conf_get(Join([Prefix, PoolName, "udp.host"]), Conf, undefined)}
               , {port, cuttlefish:conf_get(Join([Prefix, PoolName, "udp.port"]), Conf, undefined)}
               ],
    UDPOpts = Filter(UDPOpts0),
    SSLOpts0 = [ {versions,       case cuttlefish:conf_get(Join([Prefix, PoolName, "http.ssl.version"]), Conf, undefined) of
                                    undefined -> undefined;
                                    Version -> [Version]
                                  end}
               , {keyfile,        cuttlefish:conf_get(Join([Prefix, PoolName, "http.ssl.keyfile"]), Conf, undefined)}
               , {certfile,       cuttlefish:conf_get(Join([Prefix, PoolName, "http.ssl.certfile"]), Conf, undefined)}
               , {cacertfile,     cuttlefish:conf_get(Join([Prefix, PoolName, "http.ssl.cacertfile"]), Conf, undefined)}
               ],
    SSLOpts = Filter(SSLOpts0),
    HTTPOpts0 = [ {host,          cuttlefish:conf_get(Join([Prefix, PoolName, "http.host"]), Conf, undefined)}
                , {port,          cuttlefish:conf_get(Join([Prefix, PoolName, "http.port"]), Conf, undefined)}
                , {database,      cuttlefish:conf_get(Join([Prefix, PoolName, "http.database"]), Conf, undefined)}
                , {username,      cuttlefish:conf_get(Join([Prefix, PoolName, "http.username"]), Conf, undefined)}
                , {password,      cuttlefish:conf_get(Join([Prefix, PoolName, "http.password"]), Conf, undefined)}
                , {precision,     cuttlefish:conf_get(Join([Prefix, PoolName, "http.precision"]), Conf, undefined)}
                , {https_enabled, cuttlefish:conf_get(Join([Prefix, PoolName, "https_enabled.port"]), Conf, undefined)}
                , {ssl, SSLOpts}
                ],
    HTTPOpts = Filter(HTTPOpts0),
    Opts = [ {write_protocol, cuttlefish:conf_get(Join([Prefix, PoolName, "common.write_protocol"]), Conf, undefined)}
           , {batch_size,     cuttlefish:conf_get(Join([Prefix, PoolName, "common.batch_size"]), Conf, undefined)}
           , {pool_size,      cuttlefish:conf_get(Join([Prefix, PoolName, "common.pool_size"]), Conf, undefined)}
           , {udp_opts, UDPOpts}
           , {http_opts, HTTPOpts}
           ],
    {list_to_atom(PoolName), Filter(Opts)}
  end, PoolNames)
end}.

{mapping, "backend.influxdb.hook.message.publish.$name", "emqx_backend_influxdb.hooks", [
  {datatype, string}
]}.

{translation, "emqx_backend_influxdb.hooks", fun(Conf) ->
  Hooks = cuttlefish_variable:filter_by_prefix("backend.influxdb.hook", Conf),
  lists:map(
    fun({[_, _, _,Name1,Name2, _], Val}) -> 
    {lists:concat([Name1,".",Name2]), list_to_binary(Val)}
  end, Hooks)
end}.