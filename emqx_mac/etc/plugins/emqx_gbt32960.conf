
##--------------------------------------------------------------------
## gbt32960 Connector
##--------------------------------------------------------------------

## Max allowed frame length
gbt32960.frame.max_length = 8192

## Re-send time interval
gbt32960.proto.retx_interval = 8s

## Re-send max times
gbt32960.proto.retx_max_times = 3

## Max message queue length
gbt32960.proto.message_queue_len = 10

##--------------------------------------------------------------------
## GB/T 32960 TCP Listener

## The IP address and port that the GBT32960/TCP
## listener will bind.
##
## Value: IP:Port | Port
##
## Examples: 1883, 127.0.0.1:1883, ::1:1883
gbt32960.listener.tcp = 0.0.0.0:7325

## The acceptor pool for external GBT32960/TCP listener.
##
## Value: Number
gbt32960.listener.tcp.acceptors = 8

## Maximum number of concurrent GBT32960/TCP connections.
##
## Value: Number
gbt32960.listener.tcp.max_connections = 1024000

## Maximum external connections per second.
##
## Value: Number
gbt32960.listener.tcp.max_conn_rate = 1000

## The idle timeout for external GBT32960/TCP connections.
##
## Value: Duration
gbt32960.listener.tcp.idle_timeout = 60s

## Specify the {active, N} option for the external GBT32960/TCP Socket.
##
## Value: Number
gbt32960.listener.tcp.active_n = 100

## Zone of the external GBT32960/TCP listener belonged to.
##
## See: zone.$name.*
##
## Value: String
gbt32960.listener.tcp.zone = external

## The access control rules for the GBT32960/TCP listener.
##
## See: https://github.com/emqtt/esockd#allowdeny
##
## Value: ACL Rule
##
## Example: allow 192.168.0.0/24
gbt32960.listener.tcp.access.1 = allow all

## Enable the Proxy Protocol V1/2 if the EMQ X cluster is deployed
## behind HAProxy or Nginx.
##
## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/
##
## Value: on | off
## gbt32960.listener.tcp.proxy_protocol = on

## Sets the timeout for proxy protocol. EMQ X will close the TCP connection
## if no proxy protocol packet recevied within the timeout.
##
## Value: Duration
## gbt32960.listener.tcp.proxy_protocol_timeout = 3s

## The TCP backlog defines the maximum length that the queue of pending
## connections can grow to.
##
## Value: Number >= 0
gbt32960.listener.tcp.backlog = 1024

## The TCP send timeout for external GBT32960 connections.
##
## Value: Duration
gbt32960.listener.tcp.send_timeout = 15s

## Close the TCP connection if send timeout.
##
## Value: on | off
gbt32960.listener.tcp.send_timeout_close = on

## The TCP receive buffer(os kernel) for GBT32960 connections.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## gbt32960.listener.tcp.recbuf = 2KB

## The TCP send buffer(os kernel) for GBT32960 connections.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## gbt32960.listener.tcp.sndbuf = 2KB

## The size of the user-level software buffer used by the driver.
## Not to be confused with options sndbuf and recbuf, which correspond
## to the Kernel socket buffers. It is recommended to have val(buffer)
## >= max(val(sndbuf),val(recbuf)) to avoid performance issues because
## of unnecessary copying. val(buffer) is automatically set to the above
## maximum when values sndbuf or recbuf are set.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## gbt32960.listener.tcp.buffer = 2KB

## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.
##
## Value: on | off
## gbt32960.listener.tcp.tune_buffer = off

## The TCP_NODELAY flag for GBT32960 connections. Small amounts of data are
## sent immediately if the option is enabled.
##
## Value: true | false
gbt32960.listener.tcp.nodelay = true

## The SO_REUSEADDR flag for TCP listener.
##
## Value: true | false
gbt32960.listener.tcp.reuseaddr = true

##--------------------------------------------------------------------
## GBT32960/SSL - External SSL Listener for GBT32960 Protocol

## listener.ssl.$name is the IP address and port that the GBT32960/SSL
## listener will bind.
##
## Value: IP:Port | Port
##
## Examples: 7326, 127.0.0.1:7326, ::1:7326
gbt32960.listener.ssl = 7326

## The acceptor pool for external GBT32960/SSL listener.
##
## Value: Number
gbt32960.listener.ssl.acceptors = 16

## Maximum number of concurrent GBT32960/SSL connections.
##
## Value: Number
gbt32960.listener.ssl.max_connections = 102400

## Maximum GBT32960/SSL connections per second.
##
## Value: Number
gbt32960.listener.ssl.max_conn_rate = 500

## The idle timeout for external GBT32960/SSL connections.
##
## Value: Duration
gbt32960.listener.ssl.idle_timeout = 60s

## Specify the {active, N} option for the internal GBT32960/SSL Socket.
##
## Value: Number
gbt32960.listener.ssl.active_n = 100

## Zone of the external GBT32960/SSL listener belonged to.
##
## Value: String
gbt32960.listener.ssl.zone = external

## The access control rules for the GBT32960/SSL listener.
##
## See: listener.tcp.$name.access
##
## Value: ACL Rule
gbt32960.listener.ssl.access.1 = allow all

## Enable the Proxy Protocol V1/2 if the EMQ cluster is deployed behind
## HAProxy or Nginx.
##
## See: listener.tcp.$name.proxy_protocol
##
## Value: on | off
## gbt32960.listener.ssl.proxy_protocol = on

## Sets the timeout for proxy protocol.
##
## See: listener.tcp.$name.proxy_protocol_timeout
##
## Value: Duration
## gbt32960.listener.ssl.proxy_protocol_timeout = 3s

## TLS versions only to protect from POODLE attack.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: String, seperated by ','
## gbt32960.listener.ssl.tls_versions = tlsv1.2,tlsv1.1,tlsv1

## TLS Handshake timeout.
##
## Value: Duration
gbt32960.listener.ssl.handshake_timeout = 15s

## Maximum number of non-self-issued intermediate certificates that
## can follow the peer certificate in a valid certification path.
##
## Value: Number
## gbt32960.listener.ssl.depth = 10

## String containing the user's password. Only used if the private keyfile
## is password-protected.
##
## Value: String
## gbt32960.listener.ssl.key_password = yourpass

## Path to the file containing the user's private PEM-encoded key.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: File
gbt32960.listener.ssl.keyfile = {{ platform_etc_dir }}/certs/key.pem

## Path to a file containing the user certificate.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: File
gbt32960.listener.ssl.certfile = {{ platform_etc_dir }}/certs/cert.pem

## Path to the file containing PEM-encoded CA certificates. The CA certificates
## are used during server authentication and when building the client certificate chain.
##
## Value: File
## gbt32960.listener.ssl.cacertfile = {{ platform_etc_dir }}/certs/cacert.pem

## The Ephemeral Diffie-Helman key exchange is a very effective way of
## ensuring Forward Secrecy by exchanging a set of keys that never hit
## the wire. Since the DH key is effectively signed by the private key,
## it needs to be at least as strong as the private key. In addition,
## the default DH groups that most of the OpenSSL installations have
## are only a handful (since they are distributed with the OpenSSL
## package that has been built for the operating system it’s running on)
## and hence predictable (not to mention, 1024 bits only).
## In order to escape this situation, first we need to generate a fresh,
## strong DH group, store it in a file and then use the option above,
## to force our SSL application to use the new DH group. Fortunately,
## OpenSSL provides us with a tool to do that. Simply run:
## openssl dhparam -out dh-params.pem 2048
##
## Value: File
## gbt32960.listener.ssl.dhfile = {{ platform_etc_dir }}/certs/dh-params.pem

## A server only does x509-path validation in mode verify_peer,
## as it then sends a certificate request to the client (this
## message is not sent if the verify option is verify_none).
## You can then also want to specify option fail_if_no_peer_cert.
## More information at: http://erlang.org/doc/man/ssl.html
##
## Value: verify_peer | verify_none
## gbt32960.listener.ssl.verify = verify_peer

## Used together with {verify, verify_peer} by an SSL server. If set to true,
## the server fails if the client does not have a certificate to send, that is,
## sends an empty certificate.
##
## Value: true | false
## gbt32960.listener.ssl.fail_if_no_peer_cert = true

## This is the single most important configuration option of an Erlang SSL
## application. Ciphers (and their ordering) define the way the client and
## server encrypt information over the wire, from the initial Diffie-Helman
## key exchange, the session key encryption ## algorithm and the message
## digest algorithm. Selecting a good cipher suite is critical for the
## application’s data security, confidentiality and performance.
##
## The cipher list above offers:
##
## A good balance between compatibility with older browsers.
## It can get stricter for Machine-To-Machine scenarios.
## Perfect Forward Secrecy.
## No old/insecure encryption and HMAC algorithms
##
## Most of it was copied from Mozilla’s Server Side TLS article
##
## Value: Ciphers
gbt32960.listener.ssl.ciphers = ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA

## Ciphers for TLS PSK.
## Note that 'gbt32960.listener.ssl.ciphers' and 'gbt32960.listener.ssl.psk_ciphers' cannot
## be configured at the same time.
## See 'https://tools.ietf.org/html/rfc4279#section-2'.
#gbt32960.listener.ssl.psk_ciphers = PSK-AES128-CBC-SHA,PSK-AES256-CBC-SHA,PSK-3DES-EDE-CBC-SHA,PSK-RC4-SHA

## SSL parameter renegotiation is a feature that allows a client and a server
## to renegotiate the parameters of the SSL connection on the fly.
## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
## you drop support for the insecure renegotiation, prone to MitM attacks.
##
## Value: on | off
## gbt32960.listener.ssl.secure_renegotiate = off

## A performance optimization setting, it allows clients to reuse
## pre-existing sessions, instead of initializing new ones.
## Read more about it here.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: on | off
## gbt32960.listener.ssl.reuse_sessions = on

## An important security setting, it forces the cipher to be set based
## on the server-specified order instead of the client-specified order,
## hence enforcing the (usually more properly configured) security
## ordering of the server administrator.
##
## Value: on | off
## gbt32960.listener.ssl.honor_cipher_order = on

## Use the CN, DN or CRT field from the client certificate as a username.
## Notice that 'verify' should be set as 'verify_peer'.
##
## Value: cn | dn | crt
## gbt32960.listener.ssl.peer_cert_as_username = cn

## TCP backlog for the SSL connection.
##
## See listener.tcp.$name.backlog
##
## Value: Number >= 0
## gbt32960.listener.ssl.backlog = 1024

## The TCP send timeout for the SSL connection.
##
## See listener.tcp.$name.send_timeout
##
## Value: Duration
## gbt32960.listener.ssl.send_timeout = 15s

## Close the SSL connection if send timeout.
##
## See: listener.tcp.$name.send_timeout_close
##
## Value: on | off
## gbt32960.listener.ssl.send_timeout_close = on

## The TCP receive buffer(os kernel) for the SSL connections.
##
## See: listener.tcp.$name.recbuf
##
## Value: Bytes
## gbt32960.listener.ssl.recbuf = 4KB

## The TCP send buffer(os kernel) for internal GBT32960 connections.
##
## See: listener.tcp.$name.sndbuf
##
## Value: Bytes
## gbt32960.listener.ssl.sndbuf = 4KB

## The size of the user-level software buffer used by the driver.
##
## See: listener.tcp.$name.buffer
##
## Value: Bytes
## gbt32960.listener.ssl.buffer = 4KB

## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.
##
## See: listener.tcp.$name.tune_buffer
##
## Value: on | off
## gbt32960.listener.ssl.tune_buffer = off

## The TCP_NODELAY flag for SSL connections.
##
## See: listener.tcp.$name.nodelay
##
## Value: true | false
## gbt32960.listener.ssl.nodelay = true

## The SO_REUSEADDR flag for GBT32960/SSL Listener.
##
## Value: true | false
gbt32960.listener.ssl.reuseaddr = true
