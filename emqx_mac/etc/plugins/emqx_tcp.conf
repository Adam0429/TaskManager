##------------------------------------------------------------------------------
## EMQX TCP Connector
##------------------------------------------------------------------------------

##------------------------------------------------------------------------------
## Protocol

## Idle timeout for per connections.
##
## Value: duration
tcp.proto.idle_timeout = 15s


## Uplink data stream to mqtt message topic name
##
## Placeholders:
##  - %c:  Client Id
##  - %u:  Username
tcp.proto.up_topic = tcp/%c/up

## Auto subscribe the following topic to recevie
## mqtt message from EMQ system, and deliver to client
##
## Placeholders:
##  - %c:  Client Id
##  - %u:  Username
tcp.proto.dn_topic = tcp/%c/dn

## The maximum packet size for one packet
##
## Value: Bytes
tcp.proto.max_packet_size = 65535

## Enable per connection statistics.
##
## Value: on | off
tcp.proto.enable_stats = on

## Force connection/session process GC after this number of
## messages | bytes passed through.
##
## Numbers delimited by `|'. Zero or negative is to disable.
tcp.proto.force_gc_policy = 1000|1MB

## Max message queue length and total heap size to force shutdown
## connection/session process.
## Message queue here is the Erlang process mailbox
##
## Numbers delimited by `|'. Zero or negative is to disable.
##
## Default:
##   - 8000|800MB on ARCH_64 system
##   - 1000|100MB on ARCH_32 sytem
#tcp.proto.force_shutdown_policy = 8000|800MB

##------------------------------------------------------------------------------
## TCP Listener

## IP address and port that the TCP listener will bind.
##
## Value: IP:Port | Port
##
## Examples: 8090, 127.0.0.1:8090, ::1:8090
tcp.listener.external = 0.0.0.0:8090

## The acceptor pool for TCP listener.
##
## Value: Number
tcp.listener.external.acceptors = 8

## Maximum number of concurrent TCP connections.
##
## Value: Number
tcp.listener.external.max_connections = 1024000

## Maximum connections per second.
##
## Value: Number
tcp.listener.external.max_conn_rate = 1000

## Specify the {active, N} option for the TCP Socket.
##
## Value: Number
tcp.listener.external.active_n = 100

## Rate limit for the TCP connections. Format is 'rate,burst'.
##
## Value: rate,burst
##   - rate: The average limit value for per second
##   - burst: The maximum allowed for each check, To avoid frequent restriction
##            this value is recommended to be set to `(max_packet_size * active_n)/2`
## Unit: Bps
## tcp.listener.external.rate_limit = 1024,52428800

## The access control rules for the TCP listener.
##
## See: https://github.com/emqtt/esockd#allowdeny
##
## Value: ACL Rule
##
## Example: allow 192.168.0.0/24
tcp.listener.external.access.1 = allow all

## Enable the Proxy Protocol V1/2 if the EMQ X cluster is deployed
## behind HAProxy or Nginx.
##
## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/
##
## Value: on | off
## tcp.listener.external.proxy_protocol = on

## Sets the timeout for proxy protocol. EMQ X will close the TCP connection
## if no proxy protocol packet recevied within the timeout.
##
## Value: duration
## tcp.listener.external.proxy_protocol_timeout = 3s

## The TCP backlog defines the maximum length that the queue of pending
## connections can grow to.
##
## Value: Number >= 0
tcp.listener.external.backlog = 1024

## The TCP send timeout for TCP connections.
##
## Value: duration
tcp.listener.external.send_timeout = 15s

## Close the TCP connection if send timeout.
##
## Value: on | off
tcp.listener.external.send_timeout_close = on

## The TCP receive buffer(os kernel) for TCP connections.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## tcp.listener.external.recbuf = 2KB

## The TCP send buffer(os kernel) for TCP connections.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## tcp.listener.external.sndbuf = 2KB

## The size of the user-level software buffer used by the driver.
## Not to be confused with options sndbuf and recbuf, which correspond
## to the Kernel socket buffers. It is recommended to have val(buffer)
## >= max(val(sndbuf),val(recbuf)) to avoid performance issues because
## of unnecessary copying. val(buffer) is automatically set to the above
## maximum when values sndbuf or recbuf are set.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## tcp.listener.external.buffer = 2KB

## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.
##
## Value: on | off
## tcp.listener.external.tune_buffer = off

## The TCP_NODELAY flag for TCP connections. Small amounts of data are
## sent immediately if the option is enabled.
##
## Value: true | false
tcp.listener.external.nodelay = true

## The SO_REUSEADDR flag for TCP listener.
##
## Value: true | false
tcp.listener.external.reuseaddr = true

##------------------------------------------------------------------------------
# TCP over SSL Listener

## IP address and port that the TCP/SSL listener will bind.
##
## Value: IP:Port | Port
##
## Examples: 8091, 127.0.0.1:8091, ::1:8091
tcp.listener.ssl.external = 0.0.0.0:8091

## The acceptor pool for TCP/SSL listener.
##
## Value: Number
tcp.listener.ssl.external.acceptors = 8

## Maximum number of concurrent TCP/SSL connections.
##
## Value: Number
tcp.listener.ssl.external.max_connections = 1024000

## Maximum connections per second.
##
## Value: Number
tcp.listener.ssl.external.max_conn_rate = 1000

## Specify the {active, N} option for the TCP/SSL Socket.
##
## Value: Number
tcp.listener.ssl.external.active_n = 100

## Rate limit for the TCP/SSL connections. Format is 'rate,burst'.
##
## Value: rate,burst
##   - rate: The average limit value for per second
##   - burst: The maximum allowed for each check, To avoid frequent restriction
##            this value is recommended to be set to `(max_packet_size * active_n)/2`
## Unit: Bps
## tcp.listener.ssl.external.rate_limit = 1024,52428800

## The access control rules for the TCP/SSL listener.
##
## See: https://github.com/emqtt/esockd#allowdeny
##
## Value: ACL Rule
##
## Example: allow 192.168.0.0/24
tcp.listener.ssl.external.access.1 = allow all

## Enable the Proxy Protocol V1/2 if the EMQ X cluster is deployed
## behind HAProxy or Nginx.
##
## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/
##
## Value: on | off
## tcp.listener.ssl.external.proxy_protocol = on

## Sets the timeout for proxy protocol. EMQ X will close the TCP connection
## if no proxy protocol packet recevied within the timeout.
##
## Value: duration
## tcp.listener.ssl.external.proxy_protocol_timeout = 3s

## TLS versions only to protect from POODLE attack.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: String, seperated by ','
## tcp.listener.ssl.external.tls_versions = tlsv1.2,tlsv1.1,tlsv1

## TLS Handshake timeout.
##
## Value: Duration
tcp.listener.ssl.external.handshake_timeout = 15s

## Path to the file containing the user's private PEM-encoded key.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: File
tcp.listener.ssl.external.keyfile = etc/certs/key.pem

## Path to a file containing the user certificate.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: File
tcp.listener.ssl.external.certfile = etc/certs/cert.pem

## Path to the file containing PEM-encoded CA certificates. The CA certificates
## are used during server authentication and when building the client certificate chain.
##
## Value: File
## tcp.listener.ssl.external.cacertfile = etc/certs/cacert.pem


## The Ephemeral Diffie-Helman key exchange is a very effective way of
## ensuring Forward Secrecy by exchanging a set of keys that never hit
## the wire. Since the DH key is effectively signed by the private key,
## it needs to be at least as strong as the private key. In addition,
## the default DH groups that most of the OpenSSL installations have
## are only a handful (since they are distributed with the OpenSSL
## package that has been built for the operating system it’s running on)
## and hence predictable (not to mention, 1024 bits only).
## In order to escape this situation, first we need to generate a fresh,
## strong DH group, store it in a file and then use the option above,
## to force our SSL application to use the new DH group. Fortunately,
## OpenSSL provides us with a tool to do that. Simply run:
## openssl dhparam -out dh-params.pem 2048
##
## Value: File
## tcp.listener.ssl.external.dhfile = etc/certs/dh-params.pem

## A server only does x509-path validation in mode verify_peer,
## as it then sends a certificate request to the client (this
## message is not sent if the verify option is verify_none).
## You can then also want to specify option fail_if_no_peer_cert.
## More information at: http://erlang.org/doc/man/ssl.html
##
## Value: verify_peer | verify_none
## tcp.listener.ssl.external.verify = verify_peer

## Used together with {verify, verify_peer} by an SSL server. If set to true,
## the server fails if the client does not have a certificate to send, that is,
## sends an empty certificate.
##
## Value: true | false
## tcp.listener.ssl.external.fail_if_no_peer_cert = true

## This is the single most important configuration option of an Erlang SSL
## application. Ciphers (and their ordering) define the way the client and
## server encrypt information over the wire, from the initial Diffie-Helman
## key exchange, the session key encryption ## algorithm and the message
## digest algorithm. Selecting a good cipher suite is critical for the
## application’s data security, confidentiality and performance.
##
## The cipher list above offers:
##
## A good balance between compatibility with older browsers.
## It can get stricter for Machine-To-Machine scenarios.
## Perfect Forward Secrecy.
## No old/insecure encryption and HMAC algorithms
##
## Most of it was copied from Mozilla’s Server Side TLS article
##
## Value: Ciphers
tcp.listener.ssl.external.ciphers = ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-DES-CBC3-SHA,ECDH-ECDSA-AES256-GCM-SHA384,ECDH-RSA-AES256-GCM-SHA384,ECDH-ECDSA-AES256-SHA384,ECDH-RSA-AES256-SHA384,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES256-SHA256,AES256-GCM-SHA384,AES256-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDH-ECDSA-AES128-GCM-SHA256,ECDH-RSA-AES128-GCM-SHA256,ECDH-ECDSA-AES128-SHA256,ECDH-RSA-AES128-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES128-SHA256,AES128-GCM-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-DSS-AES256-SHA,ECDH-ECDSA-AES256-SHA,ECDH-RSA-AES256-SHA,AES256-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,DHE-DSS-AES128-SHA,ECDH-ECDSA-AES128-SHA,ECDH-RSA-AES128-SHA,AES128-SHA

## Ciphers for TLS PSK.
## Note that 'tcp.listener.ssl.external.ciphers' and 'tcp.listener.ssl.psk_ciphers' cannot
## be configured at the same time.
## See 'https://tools.ietf.org/html/rfc4279#section-2'.
#tcp.listener.ssl.external.psk_ciphers = PSK-AES128-CBC-SHA,PSK-AES256-CBC-SHA,PSK-3DES-EDE-CBC-SHA,PSK-RC4-SHA

## SSL parameter renegotiation is a feature that allows a client and a server
## to renegotiate the parameters of the SSL connection on the fly.
## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
## you drop support for the insecure renegotiation, prone to MitM attacks.
##
## Value: on | off
## tcp.listener.ssl.external.secure_renegotiate = off

## A performance optimization setting, it allows clients to reuse
## pre-existing sessions, instead of initializing new ones.
## Read more about it here.
##
## See: http://erlang.org/doc/man/ssl.html
##
## Value: on | off
## tcp.listener.ssl.external.reuse_sessions = on

## An important security setting, it forces the cipher to be set based
## on the server-specified order instead of the client-specified order,
## hence enforcing the (usually more properly configured) security
## ordering of the server administrator.
##
## Value: on | off
## tcp.listener.ssl.external.honor_cipher_order = on


## The TCP backlog defines the maximum length that the queue of pending
## connections can grow to.
##
## Value: Number >= 0
tcp.listener.ssl.external.backlog = 1024

## The TCP send timeout for TCP connections.
##
## Value: duration
tcp.listener.ssl.external.send_timeout = 15s

## Close the TCP connection if send timeout.
##
## Value: on | off
tcp.listener.ssl.external.send_timeout_close = on

## The TCP receive buffer(os kernel) for TCP connections.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## tcp.listener.ssl.external.recbuf = 2KB

## The TCP send buffer(os kernel) for TCP connections.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## tcp.listener.ssl.external.sndbuf = 2KB

## The size of the user-level software buffer used by the driver.
## Not to be confused with options sndbuf and recbuf, which correspond
## to the Kernel socket buffers. It is recommended to have val(buffer)
## >= max(val(sndbuf),val(recbuf)) to avoid performance issues because
## of unnecessary copying. val(buffer) is automatically set to the above
## maximum when values sndbuf or recbuf are set.
##
## See: http://erlang.org/doc/man/inet.html
##
## Value: Bytes
## tcp.listener.ssl.external.buffer = 2KB

## Sets the 'buffer = max(sndbuf, recbuf)' if this option is enabled.
##
## Value: on | off
## tcp.listener.ssl.external.tune_buffer = off

## The TCP_NODELAY flag for TCP connections. Small amounts of data are
## sent immediately if the option is enabled.
##
## Value: true | false
tcp.listener.ssl.external.nodelay = true

## The SO_REUSEADDR flag for TCP listener.external.
##
## Value: true | false
tcp.listener.ssl.external.reuseaddr = true

